<script>
    var container_selector = '<?php echo ($container_selector ?? null);?>';
    var triggers = <?php echo ($triggers ?? json_encode([]));?>;
    var evaluations = <?php echo ($evaluations ?? json_encode([]));?>;

    $(document).ready(function () {
        // Add events to trigger option display evaluations when one of the appropriate fields change
        for (trigger_element in triggers) {
            $(container_selector).on('change', trigger_element, {trigger_element: trigger_element}, evaluateOptions);
        };

        // Trigger option evaluations
        $('input,textarea,select', container_selector).change();
    });

    function evaluateOptions(e)
    {
        // Get triggering option
        var trigger_element = e.data.trigger_element;

        // Make a list of elements affected by the trigger element
        var options_to_evaluate = [triggers[trigger_element]];

        // Loop over the affected fields, evaluating the logic for each
        var options_evaluated = 0;
        for (var i = 0; i < options_to_evaluate.length; i++) {
            for (option_id in options_to_evaluate[i]) {
                var value_ids = options_to_evaluate[i][option_id];
                var changed = false;

                for (value_id in value_ids) {
                    changed = evaluateOption(option_id, value_id);
                };

                // If a change was made to the affected field, search for triggers associated with it,
                // and add affected fields to the evaluation list
                if (changed && ("*[name='configoptions[" + option_id + "]']" in triggers)) {
                    options_to_evaluate[options_to_evaluate.length] = triggers["*[name='configoptions[" + option_id + "]']"];
                }

                // Continue looping over the list until all evaluations are resolved.  It is likely possible to
                // set up an infinite loop in this way, so perhaps we have a cap on evaluations
                // and log or output an notice when the limit is reached
                options_evaluated++;
                if (options_evaluated > <?php echo ($maximum_evaluations ?? null);?>) {
                    break;
                }
            };
        };

        // This is a small concession to the Order plugin which triggers a summary fetch after all evaluations are complete
        if (typeof fetchSummary === "function") {
            fetchSummary();
        }
    }

    /**
     * Evaluates the given option/value to see if it should be displayed or hidden
     */
    function evaluateOption(option_id, value_id)
    {
        var changed = false;
        var condition_sets = evaluations[option_id][value_id];
        for (condition_set_id in condition_sets) {
            var conditions = condition_sets[condition_set_id];
            var target_element = conditions.target_element;

            // Show fields by default and only hide them if they have display condition sets and fail them all
            var show_field = true;

            for (condition_id in conditions) {
                if (condition_id === 'target_element') {
                    continue;
                }

                var evaluation = evaluateCondition(conditions[condition_id]);

                // One condition in the set has failed, and thus the set evaluates as false
                if (!evaluation) {
                    show_field = false;
                    break;
                }
            };

            if (show_field) {
                changed = showPackageOptionField(target_element);

                // One show condition set has been fulfilled, show field and bypass other checks
                break;
            } else {
                changed = hidePackageOptionField(target_element);
            }
        };

        return changed;
    }

    /**
     * Evaluates a condition
     *
     * @param {Object} condition
     */
    function evaluateCondition(condition)
    {
        var evaluation = true;

        // Convert numberic strings to integers for proper condition evaluations
        if (typeof condition.value !== 'number' && $.isNumeric(condition.value)) {
            condition.value = parseInt(condition.value);
        }

        // Convert numberic strings to integers for proper condition evaluations
        var field_value = $(condition.trigger_selector).val();
        if (typeof field_value !== 'number' && $.isNumeric(field_value)) {
            field_value = parseInt(field_value);
        }

        if (condition.operator === 'in') {
            evaluation = field_value !== ''
                && condition.value.includes(field_value);
        } else if (condition.operator === '!=') {
            evaluation = evaluateNotEqual(condition, field_value);
        } else if (condition.operator === '=') {
            evaluation = evaluateEqual(condition, field_value);
        } else if (condition.operator === '>') {
            evaluation = field_value > condition.value;
        } else if (condition.operator === '<') {
            evaluation = field_value < condition.value;
        }

        return evaluation;
    }

    /**
     * Show the given package option/value
     *
     * @param {Object} condition
     * @param {String} field_value
     */
    function evaluateNotEqual(condition, field_value)
    {
        // Get the right trigger field
        var trigger_field = $(condition.trigger_selector);
        if (trigger_field.prop('type') === 'radio') {
            trigger_field = $(condition.trigger_selector + '[value=' + condition.value + ']');
        } else if (typeof trigger_field === 'select') {
            trigger_field = $(condition.trigger_selector + ' option[value=' + condition.value + ']');
        }

        if (trigger_field && trigger_field.prop('nodeName').toLowerCase() === 'option') {
            return trigger_field.prop('selected') === false;
        } else if (trigger_field
            && (trigger_field.prop('type') === 'checkbox' || trigger_field.prop('type') === 'radio')
        ) {
            return trigger_field.prop('checked') === false;
        } else {
            return field_value !== condition.value;
        }
    }

    /**
     * Show the given package option/value
     *
     * @param {Object} condition
     * @param {String} field_value
     */
    function evaluateEqual(condition, field_value)
    {
        // Get the right trigger field
        var trigger_field = $(condition.trigger_selector);
        if (trigger_field.prop('type') === 'radio') {
            trigger_field = $(condition.trigger_selector + '[value=' + condition.value + ']');
        } else if (typeof trigger_field === 'select') {
            trigger_field = $(condition.trigger_selector + ' option[value=' + condition.value + ']');
        }

        if (trigger_field && trigger_field.prop('nodeName').toLowerCase() === 'option') {
            return trigger_field.prop('selected') === true;
        } else if (trigger_field
            && (trigger_field.prop('type') === 'checkbox' || trigger_field.prop('type') === 'radio')
        ) {
            return trigger_field.prop('checked') === true;
        } else {
            return field_value === condition.value;
        }
    }

    /**
     * Show the given package option/value
     *
     * @param {String} target_element
     */
    function showPackageOptionField(target_element)
    {
        var changed = false;
        // Show this element and enable it
        $(target_element).parent('label').show();
        $(target_element).prop("disabled", false);

        // Don't show the parent for quantity fields
        var parent_element = $(target_element).parents("div.form-group");
        if ($('input[data-type=quantity]', parent_element).length === 0) {
            $(target_element).show();
        }

        // Show the parent div
        parent_element.show();

        changed = showIfSelectField(target_element);

        return changed;
    }

    /**
     * Handle show action for select fields
     *
     * @param {String} target_element
     */
    function showIfSelectField(target_element)
    {
        var changed = false;
        // Show and enable the parent select field if this element is an option
        if ($(target_element).parent("select").length > 0) {
            $(target_element).parent("select").show();
            $(target_element).parent("select").prop("disabled", false);

            // Show the select parent li
            $(target_element).parent("select").parents("div.form-group").show();

            // Select the current option if there are none currently selected
            var select_option = true;
            $(target_element).parent("select").find("option").each(function () {
                if ($(this).prop("selected") && !$(this).prop("disabled")) {
                    select_option = false;
                }
            });

            if (select_option) {
                $(target_element).prop("selected", "selected");
                changed = true;
            }
        }

        return changed;
    }

    /**
     * Hide the given package option/value
     *
     * @param {String} target_element
     */
    function hidePackageOptionField(target_element)
    {
        var changed = false;
        $(target_element).prop("disabled", "disabled");

        var parent_element = $(target_element).parents("div.form-group");
        if ($(target_element).parent("select").length === 0
            && $('input[type=radio]', parent_element).length === 0
        ) {
            parent_element.hide();
        } else if ($('input[data-type=quantity]', parent_element).length === 0) {
            $(target_element).hide();
        }

        changed = hideIfCheckboxField(target_element);
        changed = hideIfSelectField(target_element) || changed;
        changed = hideIfRadioField(target_element) || changed;
        changed = hideIfTextField(target_element) || changed;

        return changed;
    }

    /**
     * Handle hide action for checkbox fields
     *
     * @param {String} target_element
     */
    function hideIfCheckboxField(target_element)
    {
        var changed = false;
        var parent_element = $(target_element).parents("div.form-group");
        // Handle checkbox elements
        if ($('input[type=checkbox]', parent_element).length > 0) {
            $(target_element).prop("checked", false);
            changed = true;
        }

        return changed;
    }

    /**
     * Handle hide action for select fields
     *
     * @param {String} target_element
     */
    function hideIfSelectField(target_element)
    {
        var changed = false;
        // Handle select elements
        if ($(target_element).parent("select").length > 0) {
            var hide_select = true;
            $(target_element).parent("select").find("option").each(function () {
                if (!$(this).prop("disabled")) {
                    hide_select = false;
                }
            });

            if (hide_select) {
                // All options are disabled, hide and disable the parent select
                $(target_element).parent("select").hide();
                $(target_element).parent("select").prop("disabled", false);

                // Hide the select parent li
                $(target_element).parent("select").parents("div.form-group").hide();
            }

            // Unselect this option
            $(target_element).prop("selected", false);

            // Select the first available option
            $(target_element).parent("select").find("option").each(function () {
                if (!$(this).prop("disabled")) {
                    $(this).prop("selected", "selected");
                    changed = true;
                    return false;
                }
            });
        }

        return changed;
    }

    /**
     * Handle hide action for radio fields
     *
     * @param {String} target_element
     */
    function hideIfRadioField(target_element)
    {
        var changed = false;
        var parent_element = $(target_element).parents("div.form-group");
        var hide_parent = true;

        // Handle radio elements
        if ($('input[type=radio]', parent_element).length > 0) {
            $(target_element).parent('label').hide();
            $(target_element).prop("checked", false);
            $('input[type=radio]', parent_element).each(function () {
                if ($(this).prop("disabled") !== true) {
                    hide_parent = false;
                }
            });
            changed = true;

            if (hide_parent) {
                parent_element.hide();
            }
        }

        return changed;
    }

    /**
     * Handle hide action for text fields
     *
     * @param {String} target_element
     */
    function hideIfTextField(target_element)
    {
        var changed = false;
        if ($(target_element).is('input[type=text],textarea')) {
            $(target_element).val('');
            changed = true;
        }

        return changed;
    }
</script>